@use "sass:color";
@use "../functions";
@use "../mixins/border-radius";
@use "../variables";

//
// Check/radio
//

.form-check {
  display: block;
  min-height: variables.$form-check-min-height;
  padding-left: variables.$form-check-padding-left;
  margin-bottom: variables.$form-check-margin-bottom;

  .form-check-input {
    float: left;
    margin-left: variables.$form-check-padding-left * -1;
  }
}

.form-check-input {
  width: variables.$form-check-input-width;
  height: variables.$form-check-input-width;
  margin-top: (variables.$line-height-base - variables.$form-check-input-width) / 2; // line-height minus check height
  vertical-align: top;
  background-color: variables.$form-check-input-bg;
  border: variables.$form-check-input-border;
  appearance: none;
  color-adjust: exact; // Keep themed appearance for print

  &[type="checkbox"] {
    @include border-radius.border-radius(variables.$form-check-input-border-radius);
  }

  &[type="radio"] {
    @include border-radius.border-radius(variables.$form-check-radio-border-radius);
  }

  &:active {
    filter: variables.$form-check-input-active-filter;
  }

  &:focus {
    border-color: variables.$form-check-input-focus-border;
    outline: 0;
    box-shadow: variables.$form-check-input-focus-box-shadow;
  }

  &:checked {
    background-color: variables.$form-check-input-checked-bg-color;
    background-repeat: variables.$form-check-input-checked-bg-repeat;
    background-position: variables.$form-check-input-checked-bg-position;
    background-size: variables.$form-check-input-checked-bg-size;
    border-color: variables.$form-check-input-checked-border-color;

    &[type="checkbox"] {
      @if variables.$enable-gradients {
        background-image: functions.escape-svg(variables.$form-check-input-checked-bg-image), linear-gradient(180deg, color.adjust(variables.$form-check-input-checked-bg-color, $lightness: 10%), variables.$form-check-input-checked-bg-color);
        background-size: variables.$form-check-input-checked-bg-size, auto;
      } @else {
        background-image: functions.escape-svg(variables.$form-check-input-checked-bg-image);
      }
    }

    &[type="radio"] {
      @if variables.$enable-gradients {
        background-image: functions.escape-svg(variables.$form-check-radio-checked-bg-image), linear-gradient(180deg, color.adjust(variables.$form-check-input-checked-bg-color, $lightness: 10%), variables.$form-check-input-checked-bg-color);
        background-size: variables.$form-check-input-checked-bg-size, auto;
      } @else {
        background-image: functions.escape-svg(variables.$form-check-radio-checked-bg-image);
      }
    }
  }

  &[type="checkbox"]:indeterminate {
    background-color: variables.$form-check-input-indeterminate-bg-color;
    background-repeat: variables.$form-check-input-indeterminate-bg-repeat;
    background-position: variables.$form-check-input-indeterminate-bg-position;
    @if variables.$enable-gradients {
      background-image: functions.escape-svg(variables.$form-check-input-indeterminate-bg-image), linear-gradient(180deg, color.adjust(variables.$form-check-input-checked-bg-color, $lightness: 10%), variables.$form-check-input-checked-bg-color);
      background-size: variables.$form-check-input-checked-bg-size, auto;
    } @else {
      background-image: functions.escape-svg(variables.$form-check-input-indeterminate-bg-image);
      background-size: variables.$form-check-input-indeterminate-bg-size;
    }
    border-color: variables.$form-check-input-indeterminate-border-color;
  }

  &:disabled {
    pointer-events: none;
    filter: none;
    opacity: .5;
  }

  // Use disabled attribute in addition of :disabled pseudo-class
  // See: https://github.com/twbs/bootstrap/issues/28247
  &[disabled],
  &:disabled {
    ~ .form-check-label {
      opacity: .5;
    }
  }
}

.form-check-label {
  margin-bottom: 0;
  cursor: variables.$form-check-label-cursor;
}

//
// Switch
//

.form-switch {
  padding-left: variables.$form-switch-padding-left;

  .form-check-input {
    width: variables.$form-switch-width;
    margin-left: variables.$form-switch-padding-left * -1;
    background-image: functions.escape-svg(variables.$form-switch-bg-image);
    background-repeat: no-repeat;
    background-position: left center;
    background-size: variables.$form-switch-bg-size; // Get a 1px separation
    @include border-radius.border-radius(variables.$form-switch-border-radius);
    color-adjust: exact; // Keep themed appearance for print
    // Todo: Figure out how to tackle these, with or without mixin?
    // transition: $form-switch-transition;
    // transition-property: $form-switch-transition-property;

    &:focus {
      background-image: functions.escape-svg(variables.$form-switch-focus-bg-image);
    }

    &:checked {
      background-position: variables.$form-switch-checked-bg-position;

      @if variables.$enable-gradients {
        background-image: functions.escape-svg(variables.$form-switch-checked-bg-image), linear-gradient(180deg, variables.$form-check-input-checked-bg-color, color.adjust(variables.$form-check-input-checked-bg-color, $lightness: 10%));
        background-size: variables.$form-switch-bg-size, auto;
      } @else {
        background-image: functions.escape-svg(variables.$form-switch-checked-bg-image);
      }
    }
  }
}

.form-check-inline {
  display: inline-block;
  margin-right: variables.$form-check-inline-margin-right;
}
