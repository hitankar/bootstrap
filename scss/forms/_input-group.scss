@use "../mixins/border-radius";
@use "../variables";
@use "../vendor/rfs";

// stylelint-disable selector-no-qualifying-type

//
// Base styles
//

.input-group {
  position: relative;
  display: flex;
  flex-wrap: wrap; // For form validation feedback
  align-items: stretch;
  width: 100%;

  > .form-control,
  > .form-select,
  > .form-file {
    position: relative; // For focus state's z-index
    flex: 1 1 auto;
    width: 1%;
    min-width: 0; // https://stackoverflow.com/questions/36247140/why-dont-flex-items-shrink-past-content-size
    margin-bottom: 0;

    + .form-control,
    + .form-select,
    + .form-file {
      margin-left: -(variables.$input-border-width);
    }
  }

  // Bring the "active" form control to the top of surrounding elements
  > .form-control:focus,
  > .form-select:focus,
  > .form-file .form-file-input:focus ~ .form-file-label {
    z-index: 3;
  }

  // Bring the custom file input above the label
  > .form-file .form-file-input:focus {
    z-index: 4;
  }

  > .form-control,
  > .form-select {
    &:not(:last-child) { @include border-radius.border-right-radius(0); }
    &:not(:first-child) { @include border-radius.border-left-radius(0); }
  }

  // Custom file inputs have more complex markup, thus requiring different
  // border-radius overrides.
  > .form-file {
    display: flex;
    align-items: center;

    &:not(:last-child) .form-file-label { @include border-radius.border-right-radius(0); }
    &:not(:first-child) .form-file-label { @include border-radius.border-left-radius(0); }
  }
}


// Prepend and append
//
// While it requires one extra layer of HTML for each, dedicated prepend and
// append elements allow us to 1) be less clever, 2) simplify our selectors, and
// 3) support HTML5 form validation.

.input-group-prepend,
.input-group-append {
  display: flex;

  // Ensure buttons are always above inputs for more visually pleasing borders.
  // This isn't needed for `.input-group-text` since it shares the same border-color
  // as our inputs.
  .btn {
    position: relative;
    z-index: 2;

    &:focus {
      z-index: 3;
    }
  }

  .btn + .btn,
  .btn + .input-group-text,
  .input-group-text + .input-group-text,
  .input-group-text + .btn {
    margin-left: -(variables.$input-border-width);
  }
}

.input-group-prepend { margin-right: -(variables.$input-border-width); }
.input-group-append { margin-left: -(variables.$input-border-width); }


// Textual addons
//
// Serves as a catch-all element for any text or radio/checkbox input you wish
// to prepend or append to an input.

.input-group-text {
  display: flex;
  align-items: center;
  padding: variables.$input-padding-y variables.$input-padding-x;
  margin-bottom: 0; // Allow use of <label> elements by overriding our default margin-bottom
  @include rfs.font-size(variables.$input-font-size); // Match inputs
  font-weight: variables.$font-weight-normal;
  line-height: variables.$input-line-height;
  color: variables.$input-group-addon-color;
  text-align: center;
  white-space: nowrap;
  background-color: variables.$input-group-addon-bg;
  border: variables.$input-border-width solid variables.$input-group-addon-border-color;
  @include border-radius.border-radius(variables.$input-border-radius);
}


// Sizing
//
// Remix the default form control sizing classes into new ones for easier
// manipulation.

.input-group-lg > .form-control {
  min-height: variables.$input-height-lg;
}

.input-group-lg > .form-select {
  height: variables.$input-height-lg;
}

.input-group-lg > .form-control,
.input-group-lg > .form-select,
.input-group-lg > .input-group-prepend > .input-group-text,
.input-group-lg > .input-group-append > .input-group-text,
.input-group-lg > .input-group-prepend > .btn,
.input-group-lg > .input-group-append > .btn {
  padding: variables.$input-padding-y-lg variables.$input-padding-x-lg;
  @include rfs.font-size(variables.$input-font-size-lg);
  @include border-radius.border-radius(variables.$input-border-radius-lg);
}

.input-group-sm > .form-control {
  min-height: variables.$input-height-sm;
}

.input-group-sm > .form-select {
  height: variables.$input-height-sm;
}

.input-group-sm > .form-control,
.input-group-sm > .form-select,
.input-group-sm > .input-group-prepend > .input-group-text,
.input-group-sm > .input-group-append > .input-group-text,
.input-group-sm > .input-group-prepend > .btn,
.input-group-sm > .input-group-append > .btn {
  padding: variables.$input-padding-y-sm variables.$input-padding-x-sm;
  @include rfs.font-size(variables.$input-font-size-sm);
  @include border-radius.border-radius(variables.$input-border-radius-sm);
}

.input-group-lg > .form-select,
.input-group-sm > .form-select {
  padding-right: variables.$form-select-padding-x + variables.$form-select-indicator-padding;
}


// Prepend and append rounded corners
//
// These rulesets must come after the sizing ones to properly override sm and lg
// border-radius values when extending. They're more specific than we'd like
// with the `.input-group >` part, but without it, we cannot override the sizing.


.input-group > .input-group-prepend > .btn,
.input-group > .input-group-prepend > .input-group-text,
.input-group > .input-group-append:not(:last-child) > .btn,
.input-group > .input-group-append:not(:last-child) > .input-group-text,
.input-group > .input-group-append:last-child > .btn:not(:last-child):not(.dropdown-toggle),
.input-group > .input-group-append:last-child > .input-group-text:not(:last-child) {
  @include border-radius.border-right-radius(0);
}

.input-group > .input-group-append > .btn,
.input-group > .input-group-append > .input-group-text,
.input-group > .input-group-prepend:not(:first-child) > .btn,
.input-group > .input-group-prepend:not(:first-child) > .input-group-text,
.input-group > .input-group-prepend:first-child > .btn:not(:first-child),
.input-group > .input-group-prepend:first-child > .input-group-text:not(:first-child) {
  @include border-radius.border-left-radius(0);
}
